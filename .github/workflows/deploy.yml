name: Deploy Application

on:
  pull_request:
    types:
      - closed
    branches:
      - main

  workflow_dispatch:

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: SSH into EC2 and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Set up SSH connection
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -t rsa "$EC2_HOST" >> ~/.ssh/known_hosts
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key compose.yml nginx.conf $EC2_USER@$EC2_HOST:/home/$EC2_USER/app/

          # SSH into the EC2 instance and run deployment commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST <<EOF

          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc

              # Add the repository to Apt sources:
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
          else
              echo "Docker is already installed."
          fi

          # Stop and remove existing containers and images
          if [ "$(sudo docker ps -aq)" ]; then
              echo "Stopping and removing existing containers..."
              sudo docker stop $(sudo docker ps -aq)
              sudo docker rm $(sudo docker ps -aq)
          else
            echo "No containers to stop or remove."
          fi

          if [ "$(sudo docker images -q)" ]; then
              echo "Removing existing images..."
              sudo docker rmi $(sudo docker images -q)
          else
            echo "No images to stop or remove."  
          fi

          cd /home/$EC2_USER/app
          sudo docker compose up -d

          echo "Deployment completed successfully!"
          EOF